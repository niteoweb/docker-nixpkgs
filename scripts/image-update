set -euo pipefail
# Arguments:
# - root directory
# - attribute to test
# - nixpkgs commit/image tag
# Env vars:
# - REGISTRY_USER
# - REGISTRY_PASSWORD

root=$1
attr=$2
tag=$3


name=$REGISTRY_USER/nixpkgs-$attr:$tag
dest=docker://docker.io/$name

echo "=== Image $dest ===" >&2

echo "Checking whether the image needs to be updated.." >&2

echo "Calculating wanted image nix hash by instantiating the image derivation.." >&2
# nix-instantiate hashes all inputs to the build, so if any inputs change, the hash changes too
if ! drv=$(nix-instantiate "$root" -A "images.\"$attr\""); then
  echo "Error instantiating the image" >&2
  exit 1
fi
wantedNixHash=$(echo "$drv" | cut -d/ -f4- | cut -d- -f1)
echo "Successfully calculated wanted image nix hash to be $wantedNixHash" >&2

echo "Inspecting whether the image already exists.." >&2
if inspectionJson=$(skopeo inspect "$dest"); then
  echo "Image does exist already" >&2

  # If an image exists already, we compare the hash it has embedded to the one
  # we calculated for the inputs we have. If they are the same, we don't need to
  # update the image. If they're not the same, something changed and an update
  # is needed
  currentNixHash=$(jq -r '.Labels.NixHash' <<< "$inspectionJson")
  if [[ "$currentNixHash" == "$wantedNixHash" ]]; then
    echo "Image has the wanted image nix hash already" >&2
    echo "Image update not necessary" >&2
    exit 0
  fi

  echo "Image has the outdated image nix hash $currentNixHash" >&2
else
  # TODO: Check whether it doesn't exist or if it's another error
  echo "Error inspecting the image, assuming it doesn't exist" >&2
fi

echo "Image update necessary" >&2

echo "Building the image.." >&2
# Here we specifically don't reuse the previously instantiated derivation,
# because now we embed the hash into the derivation itself, which would change
# the hash again. Since this hash however doesn't influence the build, we can
# ignore this hash change
if ! out=$(nix-build "$root" --no-out-link -A "images.\"$attr\"" --argstr nixHash "$wantedNixHash"); then
  echo "Error building the image" >&2
  exit 2
fi
echo "Image built successfully" >&2

echo "Pushing the image.." >&2
src=docker-archive://$out
if ! skopeo copy --dest-creds "$REGISTRY_USER:$REGISTRY_PASSWORD" "$src" "${dest}"; then
  echo "Error pushing the image" >&2
  exit 6
fi
echo "Successfully pushed the image" >&2
