set -e
root=$1
# Same default profile as nix-env
profile=$(realpath ''${NIX_PROFILE:-~/.nix-profile})

if [[ -z "$1" ]]; then
  echo "Usage: export-profile [ROOTDIR]" >&2
  echo "  exports everything installed with nix-env to the given directory," >&2
  echo "  suitable as the root of the next stage in a multi-stage build." >&2
  exit 1
elif [[ -e "$root" ]]; then
  echo "The directory given to export-profile needs to not exist already" >&2
  exit 1
fi

# The standard Nix locations for profiles are either /run/current-system/sw on
# NixOS or /nix/var/nix/profiles/per-user/<user> for user-level profiles
# But these are both long and don't really fit (we're neither on NixOS nor will
# there be Nix installed). So choose /run/profile to keep this short
targetProfile="$root"/run/profile

# Link /run/profile to the Nix profile
echo "Linking $targetProfile to $profile" >&2
mkdir -p "$(dirname "$targetProfile")"
# Apparently Docker somehow deduplicates directory symlinks, causing problems
# down the line. So instead of symlinking the directory directly, we symlink all
# the files recursively instead. See below for the -Ls flags
#
# This cp returns 1 if any symlink points to a non-existant destination, so we
# ignore its exit code. This does unfortunately also ignore other errors
# Note that it's not possible to just remove invalid symlinks, as Nix would complain about
# a store path having changed contents in the nix-store --export later
cp -R -Ls "$profile" "$targetProfile" || true

# If the profile contains an etc directory, link all of its files to the roots /etc
#
# Note that the -Ls flags are used to replicate the directory structure of etc
# with symlinks for all files. This avoids conflicts with other files Docker may
# put in /etc
if [[ -e "$profile"/etc ]]; then
  echo "Linking from $root/etc to $profile/etc" >&2
  # See in above cp why the error is ignored
  cp -R -Ls "$profile"/etc "$root"/etc || true
fi

# If the profile contains bin/env, link to that from /usr/bin/env for POSIX
if [[ -x "$profile"/bin/env ]]; then
  echo "Linking from $root/usr/bin/env to $profile/bin/env" >&2
  mkdir -p "$root"/usr/bin
  ln -s "$profile"/bin/env "$root"/usr/bin/env
fi

# If the profile contains bin/sh, link to that from /bin/sh for POSIX
if [[ -x "$profile"/bin/sh ]]; then
  echo "Linking from $root/bin/sh to $profile/bin/sh" >&2
  mkdir -p "$root"/bin
  ln -s "$profile"/bin/sh "$root"/bin/sh
fi

# We also need the profiles closure in the new root for all symlinks to be valid
echo "Copying all the profiles Nix dependencies to $root" >&2
nix-store --export $(nix-store -qR "$profile") | \
  NIX_REMOTE=local?root="$root" nix-store --import >/dev/null

# nix-store --import also creates /nix/var, but we don't need this as Nix
# won't be available in the final stage, so we only need the store
rm -rf "$root/nix/var"

echo "Finished Nix profile export to $root" >&2
