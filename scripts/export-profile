set -e
root=$1
# Same default profile as nix-env
profile=$(realpath ''${NIX_PROFILE:-~/.nix-profile})

if [[ -z "$1" ]]; then
  echo "Usage: export-profile [ROOTDIR]" >&2
  echo "  exports everything installed with nix-env to the given directory," >&2
  echo "  suitable as the root of the next stage in a multi-stage build." >&2
  exit 1
elif [[ -e "$root" ]]; then
  echo "The directory given to export-profile needs to not exist already" >&2
  exit 1
fi

# Copy the profile directory to the new root, such that all the profiles
# binaries in $profile/bin/* will be available as /bin/* in the new root
#
# Note that cp -Ls is used to replicate the directory structure of the
# profile but use symlinks to point back to the files in the Nix store
# This for one avoids the problem of Docker overriding /etc when starting
echo "Copying $profile to $root" >&2
mkdir -p "$(dirname "$root")"
cp -R -Ls "$profile" "$root"

# Remove the env manifest file as we don't need it
rm "$root"/manifest.nix

# We also need the profiles closure in the new root for all symlinks to be valid
echo "Copying all the profiles Nix dependencies to $root" >&2
nix-store --export $(nix-store -qR "$profile") | \
  NIX_REMOTE=local?root="$root" nix-store --import >/dev/null

# nix-store --import also creates /nix/var, but we don't need this as Nix
# won't be available in the final stage, so we only need the store
rm -rf "$root/nix/var"

echo "Finished Nix profile export to $root" >&2
